<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>RFID Reader</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      text-align: center;
      background-color: #f4f4f4;
      margin: 0;
      padding: 0;
    }

    h1 {
      color: #333;
    }

    #rfid-table-container {
      margin: 20px auto;
      width: 80%;
      max-height: 400px; /* Maximum height for the table */
      overflow-y: auto; /* Enable vertical scrolling */
    }

    #rfid-table {
      border-collapse: collapse;
      width: 100%;
      background-color: #fff;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    #rfid-table th, #rfid-table td {
      border: 1px solid #ddd;
      padding: 12px;
      text-align: left;
    }

    #rfid-tag {
      margin: 20px auto;
      padding: 15px;
      border: 1px solid #ccc;
      max-width: 400px;
      background-color: #fff;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    #send-to-database-btn {
      margin: 10px;
      padding: 15px;
      background-color: #007bff;
      color: #fff;
      border: none;
      cursor: pointer;
      font-size: 16px;
      border-radius: 5px;
    }

    #send-to-database-btn:hover {
      background-color: #0056b3;
    }

    #search-bar {
      margin-top: 20px;
    }

    #search-input {
      padding: 8px;
      margin-right: 10px;
    }

  </style>
  <script>
    const socket = new WebSocket('wss://sep-for-device-code.onrender.com');

    // Connection opened
    socket.addEventListener('open', (event) => {
      console.log('WebSocket connection opened');
    });

    // Listen for messages
    socket.addEventListener('message', (event) => {
      const data = JSON.parse(event.data);
      console.log(`Received RFID Tag ID: ${data.tagId} at ${data.timestamp}`);
      updateTable(data);
    });

    // Error event handler
socket.addEventListener('error', (error) => {
  console.error('WebSocket encountered an error:', error);
});

    // Connection closed event handler
socket.addEventListener('close', (event) => {
  console.log('WebSocket connection closed. Attempting to reconnect...');
  // Attempt to reconnect after a delay
  setTimeout(() => {
    socket = new WebSocket('wss://sep-for-device-code.onrender.com');
  }, 3000); // Reconnect after 3 seconds
});

    function updateTable(data) {
    const rfidTable = document.getElementById('rfid-table').getElementsByTagName('tbody')[0];
    let existingRow = null;

    // Find an existing row with the same Tag ID and Event ID
    for (let i = 0; i < rfidTable.rows.length; i++) {
        const row = rfidTable.rows[i];
        if (row.cells[0].innerText === data.tagId && row.cells[10].innerText === data.evt_TagId) {
            existingRow = row;
            break;
        }
    }

  // If the Tag ID already exists, update the existing row
  if (existingRow) {
    if (data.timeType === 'TimeIN' && !existingRow.cells[1].innerText) {
      existingRow.cells[1].innerText = formatTimestamp(data.timestamp);
    } else if (data.timeType === 'TimeOUT' && !existingRow.cells[2].innerText) {
      existingRow.cells[2].innerText = formatTimestamp(data.timestamp);

      // Calculate and update the duration
      const timeIn = new Date(existingRow.cells[1].innerText);
      const timeOut = new Date(data.timestamp);
      const { formattedDuration } = calculateDuration(timeIn, timeOut);
      existingRow.cells[3].innerText = formattedDuration;

      // Send the RFID data (including duration) to the server
      sendToServer({
        tagId: data.tagId,
        timeIn: timeIn.toISOString(),
        timeOut: timeOut.toISOString(),
        duration: formattedDuration,
      });
    }
  } else {
    // If the Tag ID does not exist, insert a new row at the top (FIFO)
    const newRow = rfidTable.insertRow(0);
    
    // Insert cells into the new row
    const tagIdCell = newRow.insertCell(0);
    const timeInCell = newRow.insertCell(1);
    const timeOutCell = newRow.insertCell(2);
    const durationCell = newRow.insertCell(3);
    const firstnameCell = newRow.insertCell(4);
    const lastnameCell = newRow.insertCell(5);
    const courseCell = newRow.insertCell(6);
    const sectionCell = newRow.insertCell(7);
    const studentNumCell = newRow.insertCell(8);
    const usr_TypeCell = newRow.insertCell(9);
    const evt_TagIdCell = newRow.insertCell(10);
    const evt_TitleCell = newRow.insertCell(11);
    const evt_HostOrgCell = newRow.insertCell(12);

    // Set the cell values
    tagIdCell.innerText = data.tagId;
    timeInCell.innerText = data.timeType === 'TimeIN' ? formatTimestamp(data.timestamp) : '';
    timeOutCell.innerText = data.timeType === 'TimeOUT' ? formatTimestamp(data.timestamp) : '';
    durationCell.innerText = '';
    firstnameCell.innerText = data.user.usr_FirstName || '';  // Update with user information
    lastnameCell.innerText = data.user.usr_LastName || '';  // Update with user information
    courseCell.innerText = data.user.usr_Course || '';  // Update with user information
    sectionCell.innerText = data.user.usr_Section || '';  // Update with user information
    studentNumCell.innerText = data.user.usr_StudentNum || '';  // Update with user information
    usr_TypeCell.innerText = data.user.usr_Type || '';  // Update with user information
    evt_TagIdCell.innerText = data.evt_TagId || '';  // Update with event information
    evt_TitleCell.innerText = data.evt_Title || '';
    evt_HostOrgCell.innerText = data.evt_HostOrg || '';

    // If the new row represents a Time OUT event, calculate and update the duration
    if (data.timeType === 'TimeOUT') {
      const timeIn = new Date(newRow.cells[1].innerText);
      const timeOut = new Date(data.timestamp);
      const { formattedDuration } = calculateDuration(timeIn, timeOut);
      newRow.cells[3].innerText = formattedDuration;

      // Send the RFID data (including duration) to the server
      sendToServer({
        tagId: data.tagId,
        timeIn: timeIn.toISOString(),
        timeOut: timeOut.toISOString(),
        duration: formattedDuration,
      });
    }
  }

  // Update the Scanned RFID Tag ID
  const tagIdElement = document.getElementById('tag-id');
  tagIdElement.innerText = data.tagId;
}


    // Function to format the timestamp
    function formatTimestamp(timestamp) {
      const formattedTimestamp = new Intl.DateTimeFormat('en-US', {
        month: 'short',
        day: 'numeric',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
        timeZoneName: 'short',
      }).format(new Date(timestamp));

      return formattedTimestamp;
    }

    // Function to calculate the duration between two timestamps
    function calculateDuration(timeIn, timeOut) {
      const durationInMilliseconds = timeOut - timeIn;
      const durationInSeconds = Math.floor(durationInMilliseconds / 1000);
      const hours = Math.floor(durationInSeconds / 3600);
      const minutes = Math.floor((durationInSeconds % 3600) / 60);
      const seconds = durationInSeconds % 60;

      // Format the duration for display
      const formattedDuration = `${hours}h ${minutes}m ${seconds}s`;

      return {
        formattedDuration,
        durationInSeconds, // You might want to keep the raw duration value for database storage
      };
    }

    // Function to send RFID data to the server
    function sendToServer(data) {
      // Check if duration is present before sending to the server
      if (data.duration) {
        // Format the timestamp before sending to the server
        const dataToSend = {
          tagId: data.tagId,
          timeIn: new Date(data.timeIn).toLocaleString(),
          timeOut: new Date(data.timeOut).toLocaleString(),
          duration: data.duration,
        };

        // Use fetch API to send data to the server
        fetch('/send-to-database', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(dataToSend),
        })
          .then(response => response.text())
          .then(data => console.log(data))
          .catch(error => console.error('Error sending RFID data to the server:', error));
      }
    }

    // Function to filter table rows by selected criteria
    function filterTable() {
      const input = document.getElementById('search-input');
      const filter = input.value.toUpperCase();
      const table = document.getElementById('rfid-table');
      const tbody = table.getElementsByTagName('tbody')[0];
      const rows = tbody.getElementsByTagName('tr');

      const criteria = document.querySelector('input[name="filter-criteria"]:checked').value;

      for (let i = 0; i < rows.length; i++) {
        const cell = rows[i].getElementsByTagName('td')[criteria];
        if (cell) {
          const textValue = cell.textContent || cell.innerText;
          if (textValue.toUpperCase().indexOf(filter) > -1) {
            rows[i].style.display = '';
          } else {
            rows[i].style.display = 'none';
          }
        }
      }
    }
  </script>

</head>
<body>
  <h1>RFID Tag Reader</h1>

  <!-- Search Bar -->
  <div id="search-bar">
    <input type="text" id="search-input" onkeyup="filterTable()" placeholder="Search">
    <input type="radio" name="filter-criteria" value="4" onclick="filterTable()"> First Name
    <input type="radio" name="filter-criteria" value="5" onclick="filterTable()"> Last Name
    <input type="radio" name="filter-criteria" value="6" onclick="filterTable()"> Course
    <input type="radio" name="filter-criteria" value="7" onclick="filterTable()"> Section
    <input type="radio" name="filter-criteria" value="8" onclick="filterTable()"> Student Number
    <input type="radio" name="filter-criteria" value="9" onclick="filterTable()"> User Type
    <input type="radio" name="filter-criteria" value="10" onclick="filterTable()"> Event ID
    <input type="radio" name="filter-criteria" value="11" onclick="filterTable()"> Event Title
    <input type="radio" name="filter-criteria" value="12" onclick="filterTable()"> Host Org
  </div>

  <!-- RFID Data Table Container with Scroll Bar -->
  <div id="rfid-table-container">
    <table id="rfid-table">
      <thead>
        <tr>
          <th>Tag ID</th>
          <th>Time In</th>
          <th>Time Out</th>
          <th>Duration</th>
          <th>First Name</th>
          <th>Last Name</th>
          <th>Course</th>
          <th>Section</th>
          <th>Student Number</th>
          <th>User Type</th>
          <th>Event ID</th>
          <th>Event Title</th>
          <th>Host Org</th>
        </tr>
      </thead> 
      <tbody></tbody>
    </table>
  </div>

  <!-- Scanned RFID Tag ID -->
  <div id="rfid-tag">
    <p>Scanned RFID Tag ID: <span id="tag-id"></span></p>
  </div>



</body>
</html>
